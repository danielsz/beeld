* Beeld

This library displays the metadata associated with images and some
more. Images formats embed standardized information about
themselves. This is what is meant with metadata. Several standards
coexist, for example Exif, IPTC, ICC and XMP. A special tag called
/Makernote/ allows camera manufactures to add their proprietary
tags. Over the years, software solutions for retrieving and preserving
metadata have coalesced around a handful of flagship
projects with Phil Harvey's [[Exiftool][Exiftool]] reigning supreme. For Java, the
go-to solution is Drew Noakes's [[https://github.com/drewnoakes/metadata-extractor][metadata extractor]]. The current
Clojure library depends on the latter.

Two namespaces are meant for public consumption, ~beeld.core~ and
~beeld.metadata~.

** beeld.metadata

Most users will need only the ~tags~ function, which accepts a filename
and returns a data structure reflecting the metadata available for the
images. Since images can have extensive metadata, the data structure,
a map of maps, is organized around standardized directories. Think
about them as thematic groupings of information. Examples of such
headings are ~Exif SubIFD~, ~File Type~, ~GPS~, etc.

The argument to ~tags~ are the same arguments that
~clojure.java.io/input-stream~ accepts: InputStream, File, URI, URL,
byte array, strings. A string argument gets first resolved as a URI,
then as a local file name.

The ~beeld.metadata~ offers several convenience functions that retrieve
a particular metadata tag, for example ~mime-type~, ~lens~, ~make~,
~orientation~, etc.

** beeld.core

~beeld.core~ defines an interface geared towards low-level image
manipulation. The namespace includes functions to convert images to
base64, streams or byte arrays, very much in the spirit of Java
I/O. Special mention for the scale function. Java's /ImageIO/ loses
orientation after reading an image which can break scaling or resizing
portrait images. The ~scale~ function in /beeld.core/ will honor the
orientation tag found in the metada and resize the image accordingly.

